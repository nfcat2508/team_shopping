defmodule TeamShopping.Repo.Migrations.GenerateResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :creator_id,
          references(:users,
            column: :id,
            name: "teams_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:shopping_lists, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :creator_id,
          references(:users,
            column: :id,
            name: "shopping_lists_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "shopping_lists_team_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:members, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :name, :text, null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "members_team_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "members_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create unique_index(:members, [:team_id, :name], name: "members_unique_member_name_index")

    create unique_index(:members, [:team_id, :user_id], name: "members_unique_membership_index")

    create table(:list_items, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :citext, null: false
      add :quantity, :bigint
      add :quantity_unit, :text
      add :status, :text, null: false, default: "open"
      add :order, :bigint

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :list_id,
          references(:shopping_lists,
            column: :id,
            name: "list_items_list_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false

      add :assigned_member_id,
          references(:members,
            column: :id,
            name: "list_items_assigned_member_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:catalogs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :creator_id,
          references(:users,
            column: :id,
            name: "catalogs_creator_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "catalogs_team_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:articles, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :citext, null: false
      add :quantity, :bigint
      add :quantity_unit, :text
      add :order, :bigint
      add :lastly_shopped_at, :utc_datetime

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :catalog_id,
          references(:catalogs,
            column: :id,
            name: "articles_catalog_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false

      add :assigned_member_id,
          references(:members,
            column: :id,
            name: "articles_assigned_member_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :nilify_all,
            on_update: :update_all
          )
    end
  end

  def down do
    drop constraint(:articles, "articles_catalog_id_fkey")

    drop constraint(:articles, "articles_assigned_member_id_fkey")

    drop table(:articles)

    drop constraint(:catalogs, "catalogs_creator_id_fkey")

    drop constraint(:catalogs, "catalogs_team_id_fkey")

    drop table(:catalogs)

    drop constraint(:list_items, "list_items_list_id_fkey")

    drop constraint(:list_items, "list_items_assigned_member_id_fkey")

    drop table(:list_items)

    drop_if_exists unique_index(:members, [:team_id, :user_id],
                     name: "members_unique_membership_index"
                   )

    drop_if_exists unique_index(:members, [:team_id, :name],
                     name: "members_unique_member_name_index"
                   )

    drop constraint(:members, "members_team_id_fkey")

    drop constraint(:members, "members_user_id_fkey")

    drop table(:members)

    drop constraint(:shopping_lists, "shopping_lists_creator_id_fkey")

    drop constraint(:shopping_lists, "shopping_lists_team_id_fkey")

    drop table(:shopping_lists)

    drop constraint(:teams, "teams_creator_id_fkey")

    drop table(:teams)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
